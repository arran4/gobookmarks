{{ template "head" $ }}
    {{ if not loggedIn }}
        You will need to login to see this page: <a href="/login">Login</a><br>
    {{else}}
        {{- if not bookmarksExist }}
        <p>Your bookmarks repository was not found. Click <a href="/edit">here</a> to create it.</p>
        {{- end }}
        {{- if tab }}<h1>{{ tab }} <a class="edit-link" href="/editTab?name={{ tab }}&ref={{ref}}&tab={{tab}}" title="Edit">&#9998;</a></h1>{{ end }}
        {{- range $i, $p := bookmarkPages }}
        <div class="bookmarkPage{{ if useCssColumns }} cssColumns{{ end }}" id="page{{$i}}" data-sha="{{$p.Sha}}">
            {{- if $p.DisplayName }}<h2>{{ $p.DisplayName }}</h2>{{ end }}
            {{- range .Blocks }}
            {{- if .HR }}
            <hr class="bookmarkHr" />
            {{- else if useCssColumns }}
            <div class="bookmarkColumns">
                {{- $first := true }}
                {{- range $ci, $c := .Columns }}
                    {{- if not $first }}<div class="columnBreak"></div>{{ end }}
                    {{- range $c.Categories }}
                        <div class="categoryBlock" id="cat{{ .Index }}">
                            <h2><span class="moveIcon" title="Move">⯎</span>{{ .DisplayName }} <a class="edit-link" href="/editCategory?index={{ .Index }}&ref={{ref}}&tab={{tab}}&page={{$i}}" title="Edit">&#9998;</a></h2>
                            <ul  style="list-style-type: none;">
                                {{- range .Entries }}
                                    <li>
                                        <img src="/proxy/favicon?url={{ .Url }}" alt="•" style="width: 1em; max-height: 1em; font-weight: bolder; font-family: -moz-bullet-font;" />
                                        <a href="{{ .Url }}" target="_blank">{{ .DisplayName }}</a>
                                    </li>
                                {{- end }}
                            </ul>
                        </div>
                    {{- end }}
                    <div class="columnEndDropZone" data-col="{{$ci}}"></div>
                    {{- $first = false }}
                {{- end }}
                <div class="newColumnDropZone"></div>
            </div>
            {{- else }}
            <table>
                <tr valign="top">
                    {{- range $ci, $c := .Columns }}
                    <td>
                        {{- range $c.Categories }}
                            <div class="categoryBlock" id="cat{{ .Index }}">
                                <h2><span class="moveIcon" title="Move">⯎</span>{{ .DisplayName }} <a class="edit-link" href="/editCategory?index={{ .Index }}&ref={{ref}}&tab={{tab}}&page={{$i}}" title="Edit">&#9998;</a></h2>
                                <ul  style="list-style-type: none;">
                                    {{- range .Entries }}
                                        <li>
                                            <img src="/proxy/favicon?url={{ .Url }}" alt="•" style="width: 1em; max-height: 1em; font-weight: bolder; font-family: -moz-bullet-font;" />
                                            <a href="{{ .Url }}" target="_blank">{{ .DisplayName }}</a>
                                        </li>
                                    {{- end }}
                                </ul>
                            </div>
                        {{- end }}
                        <div class="columnEndDropZone" data-col="{{$ci}}"></div>
                    </td>
                    {{- end }}
                    <td class="newColumnDropZone"></td>
                </tr>
            </table>
            {{- end }}
            {{- end }}
        </div>
        {{- end }}
        <p><a href="/editTab?ref={{ref}}&tab={{tab}}">Add Tab</a></p>
        {{ if $.EditMode }}
        <script>
        document.addEventListener('DOMContentLoaded', function () {
            if (!document.body.classList.contains('edit-mode')) return;

            document.querySelectorAll('.categoryBlock').forEach(function (block) {
                block.addEventListener('dragover', dragOver);
                block.addEventListener('dragleave', dragLeave);
                block.addEventListener('drop', drop);
            });

            document.querySelectorAll('.categoryBlock h2').forEach(function (title) {
                title.setAttribute('draggable', 'true');
                title.addEventListener('dragstart', dragStart);
            });

            document.querySelectorAll('.newColumnDropZone').forEach(function (zone) {
                zone.addEventListener('dragover', dragOver);
                zone.addEventListener('dragleave', dragLeave);
                zone.addEventListener('drop', dropNewColumn);
            });

            document.querySelectorAll('.columnEndDropZone').forEach(function (zone) {
                zone.addEventListener('dragover', dragOver);
                zone.addEventListener('dragleave', dragLeave);
                zone.addEventListener('drop', dropEndColumn);
            });

            function dragStart(e) {
                var block = e.currentTarget.closest('.categoryBlock');
                e.dataTransfer.setData('text/plain', block.id);
                var page = block.closest('.bookmarkPage');
                if (page) {
                    e.dataTransfer.setData('pageSha', page.dataset.sha);
                }
                e.dataTransfer.effectAllowed = 'move';
            }

            function sendMove(from, to, newColumn, pageSha, destSha, destCol) {
                var params = new URLSearchParams(window.location.search);
                var ref = params.get('ref') || 'refs/heads/main';
                var branch = '';
                if (ref.startsWith('refs/heads/')) {
                    branch = ref.slice(11);
                } else if (ref.startsWith('refs/tags/')) {
                    branch = 'New' + ref.slice(10);
                } else if (ref) {
                    branch = 'FromCommit' + ref;
                } else {
                    branch = 'main';
                }

                var fd = new FormData();
                fd.append('from', from);
                if (to !== null) fd.append('to', to);
                if (newColumn) fd.append('newColumn', '1');
                if (pageSha) fd.append('pageSha', pageSha);
                fd.append('branch', branch);
                fd.append('ref', ref);
                if (destSha) fd.append('destPageSha', destSha);
                if (destCol !== null) fd.append('destCol', destCol);
                fetch('/moveCategory', {method: 'POST', body: fd, credentials: 'same-origin'});
            }

            function dragOver(e) {
                e.preventDefault();
                e.currentTarget.classList.add('drag-over');
            }

            function dragLeave(e) {
                e.currentTarget.classList.remove('drag-over');
            }

            function drop(e) {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over');
                var id = e.dataTransfer.getData('text/plain');
                var el = document.getElementById(id);
                if (el && el !== e.currentTarget) {
                    e.currentTarget.parentNode.insertBefore(el, e.currentTarget);
                    var from = parseInt(id.substring(3));
                    var to = parseInt(e.currentTarget.id.substring(3));
                    var pageSha = e.dataTransfer.getData('pageSha');
                    var destSha = e.currentTarget.closest('.bookmarkPage').dataset.sha;
                    var destCol = e.currentTarget.dataset.col ? parseInt(e.currentTarget.dataset.col) : null;
                    sendMove(from, to, false, pageSha, destSha, destCol);
                }
            }

            function dropNewColumn(e) {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over');
                var id = e.dataTransfer.getData('text/plain');
                var el = document.getElementById(id);
                if (el) {
                    var from = parseInt(id.substring(3));
                    var pageSha = e.dataTransfer.getData('pageSha');
                    var destSha = e.currentTarget.closest('.bookmarkPage').dataset.sha;
                    if (e.currentTarget.tagName === 'TD') {
                        var td = document.createElement('td');
                        td.appendChild(el);
                        e.currentTarget.parentNode.insertBefore(td, e.currentTarget);
                    } else {
                        var brk = document.createElement('div');
                        brk.className = 'columnBreak';
                        var parent = e.currentTarget.parentNode;
                        parent.insertBefore(brk, e.currentTarget);
                        parent.insertBefore(el, e.currentTarget);
                    }
                    sendMove(from, -1, true, pageSha, destSha, null);
                }
            }

            function dropEndColumn(e) {
                e.preventDefault();
                e.currentTarget.classList.remove('drag-over');
                var id = e.dataTransfer.getData('text/plain');
                var el = document.getElementById(id);
                if (el) {
                    var parent = e.currentTarget.parentNode;
                    var next = e.currentTarget.nextElementSibling;
                    while (next && !next.classList.contains('categoryBlock')) {
                        next = next.nextElementSibling;
                    }
                    parent.insertBefore(el, e.currentTarget);
                    var from = parseInt(id.substring(3));
                    var to;
                    if (next) {
                        to = parseInt(next.id.substring(3));
                    } else {
                        var prev = e.currentTarget.previousElementSibling;
                        while (prev && !prev.classList.contains('categoryBlock')) {
                            prev = prev.previousElementSibling;
                        }
                        to = prev ? parseInt(prev.id.substring(3)) + 1 : 0;
                    }
                    var pageSha = e.dataTransfer.getData('pageSha');
                    var destSha = e.currentTarget.closest('.bookmarkPage').dataset.sha;
                    var destCol = e.currentTarget.dataset.col ? parseInt(e.currentTarget.dataset.col) : null;
                    sendMove(from, to, false, pageSha, destSha, destCol);
                }
            }
        });
        </script>
        {{ end }}
    {{end}}
{{ template "tail" $ }}